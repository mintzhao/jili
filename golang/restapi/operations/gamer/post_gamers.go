package gamer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostGamersHandlerFunc turns a function with the right signature into a post gamers handler
type PostGamersHandlerFunc func(PostGamersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostGamersHandlerFunc) Handle(params PostGamersParams) middleware.Responder {
	return fn(params)
}

// PostGamersHandler interface for that can handle valid post gamers params
type PostGamersHandler interface {
	Handle(PostGamersParams) middleware.Responder
}

// NewPostGamers creates a new http.Handler for the post gamers operation
func NewPostGamers(ctx *middleware.Context, handler PostGamersHandler) *PostGamers {
	return &PostGamers{Context: ctx, Handler: handler}
}

/*PostGamers swagger:route POST /gamers Gamer postGamers

新增比赛方

新增比赛方

*/
type PostGamers struct {
	Context *middleware.Context
	Handler PostGamersHandler
}

func (o *PostGamers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostGamersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
