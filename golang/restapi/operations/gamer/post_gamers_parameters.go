package gamer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/mintzhao/jili/golang/models"
)

// NewPostGamersParams creates a new PostGamersParams object
// with the default values initialized.
func NewPostGamersParams() PostGamersParams {
	var ()
	return PostGamersParams{}
}

// PostGamersParams contains all the bound params for the post gamers operation
// typically these are obtained from a http.Request
//
// swagger:parameters postGamers
type PostGamersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*新增比赛方的信息
	  Required: true
	  In: body
	*/
	Gamer []*models.Gamer
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *PostGamersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body []*models.Gamer
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("gamer", "body"))
			} else {
				res = append(res, errors.NewParseError("gamer", "body", "", err))
			}

		} else {
			for _, io := range o.Gamer {
				if err := io.Validate(route.Formats); err != nil {
					res = append(res, err)
					break
				}
			}

			if len(res) == 0 {
				o.Gamer = body
			}
		}

	} else {
		res = append(res, errors.Required("gamer", "body"))
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
