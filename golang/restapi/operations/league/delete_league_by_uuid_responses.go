package league

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mintzhao/jili/golang/models"
)

/*DeleteLeagueByUUIDOK 删除了一条联赛信息

swagger:response deleteLeagueByUuidOK
*/
type DeleteLeagueByUUIDOK struct {
}

// NewDeleteLeagueByUUIDOK creates DeleteLeagueByUUIDOK with default headers values
func NewDeleteLeagueByUUIDOK() *DeleteLeagueByUUIDOK {
	return &DeleteLeagueByUUIDOK{}
}

// WriteResponse to the client
func (o *DeleteLeagueByUUIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*DeleteLeagueByUUIDDefault unexpected error

swagger:response deleteLeagueByUuidDefault
*/
type DeleteLeagueByUUIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteLeagueByUUIDDefault creates DeleteLeagueByUUIDDefault with default headers values
func NewDeleteLeagueByUUIDDefault(code int) *DeleteLeagueByUUIDDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteLeagueByUUIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete league by UUID default response
func (o *DeleteLeagueByUUIDDefault) WithStatusCode(code int) *DeleteLeagueByUUIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete league by UUID default response
func (o *DeleteLeagueByUUIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete league by UUID default response
func (o *DeleteLeagueByUUIDDefault) WithPayload(payload *models.Error) *DeleteLeagueByUUIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete league by UUID default response
func (o *DeleteLeagueByUUIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteLeagueByUUIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
