package league

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostLeaguesHandlerFunc turns a function with the right signature into a post leagues handler
type PostLeaguesHandlerFunc func(PostLeaguesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostLeaguesHandlerFunc) Handle(params PostLeaguesParams) middleware.Responder {
	return fn(params)
}

// PostLeaguesHandler interface for that can handle valid post leagues params
type PostLeaguesHandler interface {
	Handle(PostLeaguesParams) middleware.Responder
}

// NewPostLeagues creates a new http.Handler for the post leagues operation
func NewPostLeagues(ctx *middleware.Context, handler PostLeaguesHandler) *PostLeagues {
	return &PostLeagues{Context: ctx, Handler: handler}
}

/*PostLeagues swagger:route POST /leagues League postLeagues

新建联赛

根据参数,新建联赛

*/
type PostLeagues struct {
	Context *middleware.Context
	Handler PostLeaguesHandler
}

func (o *PostLeagues) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostLeaguesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
