package league

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutLeagueByUUIDHandlerFunc turns a function with the right signature into a put league by UUID handler
type PutLeagueByUUIDHandlerFunc func(PutLeagueByUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutLeagueByUUIDHandlerFunc) Handle(params PutLeagueByUUIDParams) middleware.Responder {
	return fn(params)
}

// PutLeagueByUUIDHandler interface for that can handle valid put league by UUID params
type PutLeagueByUUIDHandler interface {
	Handle(PutLeagueByUUIDParams) middleware.Responder
}

// NewPutLeagueByUUID creates a new http.Handler for the put league by UUID operation
func NewPutLeagueByUUID(ctx *middleware.Context, handler PutLeagueByUUIDHandler) *PutLeagueByUUID {
	return &PutLeagueByUUID{Context: ctx, Handler: handler}
}

/*PutLeagueByUUID swagger:route PUT /leagues/{UUID} League putLeagueByUuid

更新特定联赛信息

更新联赛信息, 全额修改

*/
type PutLeagueByUUID struct {
	Context *middleware.Context
	Handler PutLeagueByUUIDHandler
}

func (o *PutLeagueByUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutLeagueByUUIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
