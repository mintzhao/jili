package game

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetGameByUUIDHandlerFunc turns a function with the right signature into a get game by UUID handler
type GetGameByUUIDHandlerFunc func(GetGameByUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGameByUUIDHandlerFunc) Handle(params GetGameByUUIDParams) middleware.Responder {
	return fn(params)
}

// GetGameByUUIDHandler interface for that can handle valid get game by UUID params
type GetGameByUUIDHandler interface {
	Handle(GetGameByUUIDParams) middleware.Responder
}

// NewGetGameByUUID creates a new http.Handler for the get game by UUID operation
func NewGetGameByUUID(ctx *middleware.Context, handler GetGameByUUIDHandler) *GetGameByUUID {
	return &GetGameByUUID{Context: ctx, Handler: handler}
}

/*GetGameByUUID swagger:route GET /games/{UUID} Game getGameByUuid

比赛信息

获取特定场次比赛信息

*/
type GetGameByUUID struct {
	Context *middleware.Context
	Handler GetGameByUUIDHandler
}

func (o *GetGameByUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetGameByUUIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
