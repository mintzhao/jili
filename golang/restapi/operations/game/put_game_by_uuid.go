package game

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutGameByUUIDHandlerFunc turns a function with the right signature into a put game by UUID handler
type PutGameByUUIDHandlerFunc func(PutGameByUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutGameByUUIDHandlerFunc) Handle(params PutGameByUUIDParams) middleware.Responder {
	return fn(params)
}

// PutGameByUUIDHandler interface for that can handle valid put game by UUID params
type PutGameByUUIDHandler interface {
	Handle(PutGameByUUIDParams) middleware.Responder
}

// NewPutGameByUUID creates a new http.Handler for the put game by UUID operation
func NewPutGameByUUID(ctx *middleware.Context, handler PutGameByUUIDHandler) *PutGameByUUID {
	return &PutGameByUUID{Context: ctx, Handler: handler}
}

/*PutGameByUUID swagger:route PUT /games/{UUID} Game putGameByUuid

更新比赛信息

根据uuid,替换一场比赛的信息

*/
type PutGameByUUID struct {
	Context *middleware.Context
	Handler PutGameByUUIDHandler
}

func (o *PutGameByUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutGameByUUIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
