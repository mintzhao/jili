package game

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mintzhao/jili/golang/models"
)

/*PutGameByUUIDOK 更新比赛成功

swagger:response putGameByUuidOK
*/
type PutGameByUUIDOK struct {

	// In: body
	Payload *models.Game `json:"body,omitempty"`
}

// NewPutGameByUUIDOK creates PutGameByUUIDOK with default headers values
func NewPutGameByUUIDOK() *PutGameByUUIDOK {
	return &PutGameByUUIDOK{}
}

// WithPayload adds the payload to the put game by Uuid o k response
func (o *PutGameByUUIDOK) WithPayload(payload *models.Game) *PutGameByUUIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put game by Uuid o k response
func (o *PutGameByUUIDOK) SetPayload(payload *models.Game) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutGameByUUIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutGameByUUIDDefault Unexpected error

swagger:response putGameByUuidDefault
*/
type PutGameByUUIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutGameByUUIDDefault creates PutGameByUUIDDefault with default headers values
func NewPutGameByUUIDDefault(code int) *PutGameByUUIDDefault {
	if code <= 0 {
		code = 500
	}

	return &PutGameByUUIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put game by UUID default response
func (o *PutGameByUUIDDefault) WithStatusCode(code int) *PutGameByUUIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put game by UUID default response
func (o *PutGameByUUIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put game by UUID default response
func (o *PutGameByUUIDDefault) WithPayload(payload *models.Error) *PutGameByUUIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put game by UUID default response
func (o *PutGameByUUIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutGameByUUIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
