package game

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetGamesParams creates a new GetGamesParams object
// with the default values initialized.
func NewGetGamesParams() GetGamesParams {
	var ()
	return GetGamesParams{}
}

// GetGamesParams contains all the bound params for the get games operation
// typically these are obtained from a http.Request
//
// swagger:parameters getGames
type GetGamesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*League identity
	  In: query
	*/
	Luuid *string
	/*League season identity
	  In: query
	*/
	Suuid *string
	/*timestamp, 默认为当前服务器时间
	  In: query
	*/
	Ts *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetGamesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLuuid, qhkLuuid, _ := qs.GetOK("luuid")
	if err := o.bindLuuid(qLuuid, qhkLuuid, route.Formats); err != nil {
		res = append(res, err)
	}

	qSuuid, qhkSuuid, _ := qs.GetOK("suuid")
	if err := o.bindSuuid(qSuuid, qhkSuuid, route.Formats); err != nil {
		res = append(res, err)
	}

	qTs, qhkTs, _ := qs.GetOK("ts")
	if err := o.bindTs(qTs, qhkTs, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGamesParams) bindLuuid(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Luuid = &raw

	return nil
}

func (o *GetGamesParams) bindSuuid(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Suuid = &raw

	return nil
}

func (o *GetGamesParams) bindTs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("ts", "query", "int64", raw)
	}
	o.Ts = &value

	return nil
}
