package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Game game

swagger:model Game
*/
type Game struct {

	/* gamer1
	 */
	Gamer1 *Gamer `json:"gamer1,omitempty"`

	/* gamer2
	 */
	Gamer2 *Gamer `json:"gamer2,omitempty"`

	/* 联赛赛季uuid
	 */
	Suuid string `json:"suuid,omitempty"`

	/* 比赛开始时间
	 */
	Timestamp int64 `json:"timestamp,omitempty"`

	/* 比赛标识id
	 */
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this game
func (m *Game) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGamer1(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGamer2(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Game) validateGamer1(formats strfmt.Registry) error {

	if swag.IsZero(m.Gamer1) { // not required
		return nil
	}

	if m.Gamer1 != nil {

		if err := m.Gamer1.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Game) validateGamer2(formats strfmt.Registry) error {

	if swag.IsZero(m.Gamer2) { // not required
		return nil
	}

	if m.Gamer2 != nil {

		if err := m.Gamer2.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
